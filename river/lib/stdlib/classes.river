def attr_reader(name)
  # TODO: the "do" block here will bind, in its closure, to the object that attr_reader was invoked on
  # What we want is to "bind" the local "name" - kinda like a closure, but we want the "do" block to dynamically
  # update its "context/self" to whatever object it was invoked on - like a normal method
  set_method name, do
    get_member name
  end
end
def root_attr_reader(name)
  set_method name, do
    root.get_member name
  end
end
def tap(block)
  block.call self
  self
end
def tap_eval(block)
  self.eval block
  self
end

root_attr_reader :ClassPrototype
root_attr_reader :Classes
root_attr_reader :ClassInstancePrototype

@ClassPrototype = derive.tap_eval do
  attr_reader :name
  attr_reader :prototype

  @name = "ClassPrototype"

  def create_prototype
    klass = self
    ClassInstancePrototype.derive.tap_eval do
      @class = self
    end
  end

  def prototype
    @prototype = @prototype || create_prototype
  end

  def new
    prototype.derive
  end
end

@ClassInstancePrototype = derive.tap_eval do
  def class
    @class || super
  end
end

@Classes = derive.tap_eval do
  def get_class(name)
    get_member(name) || derive_class(name)
  end

  def derive_class(name)
    attr_reader name
    set_member name, ClassPrototype.derive.tap_eval(do
      @name = name
      @prototype = ClassInstancePrototype.derive
    end)
  end
end

def class(name, block)
  Classes.get_class(name).tap_eval do
    prototype.eval block
  end
end
